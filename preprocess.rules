####################
## Preprocess
####################


rule _all_basecalling:
 input:
   config['basecalled_fast5_fp1'] + '/Done.Albacore'

rule _all_preprocess:
 input:
   expand(config['project_dir'] + '/03_subsampled_reads/{barcode}/reads.fastq.gz', barcode=BARCODES),
   expand(config['project_dir'] + '/reports/{step}/{barcode}/reads.asm.stats', step=['01_basecalled_reads','03_subsampled_reads'], barcode=BARCODES),
   expand(config['project_dir'] + '/reports/01_basecalled_reads/{barcode}/reads.aln.tsv', barcode=BARCODES)

## Albacore basecall
rule albacore_basecall:
 input:
  raw_fast5_fp = config['raw_fast5_fp']
 output:
  config['basecalled_fast5_fp1'] + '/Done.Albacore'
 threads: 8
 params:
  basecalled_fast5_fp = config['basecalled_fast5_fp1']
 shell:
  """
  read_fast5_basecaller.py --flowcell {config[flowcell]} --kit {config[kit]} --barcoding \
     --output_format fast5,fastq --worker_threads {threads} --recursive \
     --input {input.raw_fast5_fp} --save_path {params.basecalled_fast5_fp}
  touch {output}
  """

## Gather_up_nanopore_fastqs
rule collect_raw_fastq:
 input:
  fast5_fp1 = config['basecalled_fast5_fp1'] + '/fast5/basecalled_albacore_v2.1/workspace/pass/{barcode}',
  fast5_fp2 = config['basecalled_fast5_fp2'] + '/fast5/basecalled_albacore_v2.1/workspace/pass/{barcode}'
  ## run9
  #fast5_fp1 = config['basecalled_fast5_fp1'] + '/{barcode}/{barcode}_basecalled_albacore_v2.1/workspace/pass/{barcode}',
  #fast5_fp2 = config['basecalled_fast5_fp2'] + '/basecalled_dir_albacore_v2.1/workspace/pass/{barcode}' 
 output:
  config['project_dir'] + '/01_basecalled_reads/{barcode}/reads.fastq'
 run:
  if os.path.samefile(input.fast5_fp1, input.fast5_fp2):
   shell("cat {input.fast5_fp1}/*.fastq > {output}")
  else:
   shell("cat {input.fast5_fp1}/*.fastq {input.fast5_fp2}/*.fastq > {output}")

## Assembly stats raw long reads
rule asm_stats_raw:
 input:
  config['project_dir'] + '/01_basecalled_reads/{barcode}/reads.fastq'
 output:
  config['project_dir'] + '/reports/01_basecalled_reads/{barcode}/reads.asm.stats'
 shell:
  """
  assembly-stats {input} > {output}
  """

## Assess reads using reference genome
rule assess_reads:
 input:
  genome = config['project_dir'] + '/' + config['genome_fp'],
  reads = config['project_dir'] + '/01_basecalled_reads/{barcode}/reads.fastq',
  python_script_fp = config['basecalling_cmp_fp'] + '/read_length_identity.py'
 output:
  aln = config['project_dir'] + '/01_basecalled_reads/{barcode}/reads.paf',
  table = config['project_dir'] + '/reports/01_basecalled_reads/{barcode}/reads.aln.tsv'
 threads: 1
 shell:
  """
  minimap2 -k12 -t {threads} -c {input.genome} {input.reads} > {output.aln}
  python {input.python_script_fp} {input.reads} {output.aln} > {output.table}
  """

## Confidently-binned long reads
rule trim_reads:
 input:
  config['project_dir'] + '/01_basecalled_reads/{barcode}/reads.fastq'
 output:
  config['project_dir'] + '/02_trimmed_reads/{barcode}/reads.fastq'
 threads: 4
 shell:
  """
  porechop -i {input} -o {output} --threads {threads}
  """

## Subsample long reads
rule subsample_reads:
 input:
  config['project_dir'] + '/02_trimmed_reads/{barcode}/reads.fastq'
 output:
  config['project_dir'] + '/03_subsampled_reads/{barcode}/reads.fastq.gz'
 shell:
  """
  filtlong --min_length 1000 --keep_percent 90 --target_bases 500000000 {input} | gzip > {output}
  """

## Subsample long reads with reference
rule subsample_reads_with_reference:
 input:
  reads = config['project_dir'] + '/02_trimmed_reads/{barcode}/reads.fastq',
  R1 = config['project_dir'] + '/' + config['short_reads_fp'] + '/{barcode}/R1.fastq',
  R2 = config['project_dir'] + '/' + config['short_reads_fp'] + '/{barcode}/R2.fastq'
 output:
  config['project_dir'] + '/03_subsampled_reads/{barcode}/reads.with.ref.fastq.gz'
 shell:
  """
  filtlong -1 {input.R1} -2 {input.R2} --min_length 1000 --keep_percent 90 --target_bases 500000000 {input.reads} --trim --split 250 | gzip > {output}
  """

rule asm_stats_subsample:
 input:
  config['project_dir'] + '/03_subsampled_reads/{barcode}/reads.fastq.gz'
 output:
  config['project_dir'] + '/reports/03_subsampled_reads/{barcode}/reads.asm.stats'
 shell:
  """
  assembly-stats <(gunzip -c {input}) > {output}
  """
