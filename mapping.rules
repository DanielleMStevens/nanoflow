####################
## Mapping reads to draft assembly:
## BWA/Minimap2 + IGV
####################

from Bio import SeqIO
from glob import glob
from sbx_igv import *

rule _all_igv_mapping:
 input:
  expand(config['project_dir'] + '/reports/10_mapping/{barcode}/{draft}/{reads}.sorted.bam',
        barcode=BARCODES,draft=['pilon','unicycler'], reads=['shortreads','subsampled','corrected']),
  expand(config['project_dir'] + '/reports/10_mapping/{barcode}/{draft}/done.igv',
         barcode=BARCODES, draft=['pilon','unicycler'])

rule bwa_index_draft:
 input:
  draft1 = config['project_dir'] + '/reports/final_assembly/{barcode}/draft1.fasta',
  draft2 = config['project_dir'] + '/reports/final_assembly/{barcode}/draft2.fasta'
 output:
  draft1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/draft1.fasta',
  draft2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/draft2.fasta',
  index1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/draft1.fasta.amb',
  index2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/draft2.fasta.amb'
 shell:
  """
  cp {input.draft1} {output.draft1}
  bwa index {output.draft1}
  cp {input.draft2} {output.draft2}
  bwa index {output.draft2}
  """

rule bwa_short_reads:
 input:
  R1 = config['project_dir'] + '/' + config['short_reads_fp'] + '/{barcode}/R1.fastq',
  R2 = config['project_dir'] + '/' + config['short_reads_fp'] + '/{barcode}/R2.fastq',
  draft1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/draft1.fasta',
  draft2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/draft2.fasta',
  index1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/draft1.fasta.amb',
  index2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/draft2.fasta.amb'
 output:
  bam1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/shortreads.sorted.bam',
  bam2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/shortreads.sorted.bam'
 threads: 4
 params:
  temp1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/shortreads.tmp',
  temp2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/shortreads.tmp',
 shell:
  """
  ## draft1: canu + nanopolish + circlator + pilon 
  bwa mem -t {threads} {input.draft1} {input.R1} {input.R2} | \
   samtools sort -o {output.bam1} -T {params.temp1} -
  samtools index {output.bam1} 

  ## draft2: 
  bwa mem -t {threads} {input.draft2} {input.R1} {input.R2} | \
   samtools sort -o {output.bam2} -T {params.temp2} -
  samtools index {output.bam2} 
  """

rule minimap2_subsampled_reads:
 input:
   reads = config['project_dir'] + '/03_subsampled_reads/{barcode}/reads.fastq.gz',
   draft1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/draft1.fasta',
   draft2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/draft2.fasta',
   index1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/draft1.fasta.amb',
   index2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/draft2.fasta.amb' 
 output:
  bam1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/subsampled.sorted.bam',
  bam2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/subsampled.sorted.bam'
 threads: 4
 params:
  temp1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/subsampled.reads.tmp',
  temp2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/subsampled.reads.tmp',
 shell:
  """
  minimap2 -ax map-ont -t {threads} {input.draft1} {input.reads} | \
   samtools sort -o {output.bam1} -T {params.temp1} -
  samtools index {output.bam1}

  minimap2 -ax map-ont -t {threads} {input.draft2} {input.reads} | \
   samtools sort -o {output.bam2} -T {params.temp2} -
  samtools index {output.bam2}
  """

rule minimap2_corrected_reads:
 input:
   reads = config['project_dir'] + '/04_canu/{barcode}/canu.correctedReads.fasta.gz',
   draft1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/draft1.fasta',
   draft2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/draft2.fasta',
   index1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/draft1.fasta.amb',
   index2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/draft2.fasta.amb' 
 output:
  bam1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/corrected.sorted.bam',
  bam2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/corrected.sorted.bam'
 threads: 4
 params:
  temp1 = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/corrected.reads.tmp',
  temp2 = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/corrected.reads.tmp',
 shell:
  """
  minimap2 -ax map-ont -t {threads} {input.draft1} {input.reads} | \
   samtools sort -o {output.bam1} -T {params.temp1} -
  samtools index {output.bam1}

  minimap2 -ax map-ont -t {threads} {input.draft2} {input.reads} | \
   samtools sort -o {output.bam2} -T {params.temp2} -
  samtools index {output.bam2}
  """

rule igv_plot_pilon:
 input:
  genome = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/draft1.fasta',
  bams = expand(config['project_dir'] + '/reports/10_mapping/{{barcode}}/pilon/{reads}.sorted.bam', reads=['shortreads','subsampled','corrected']),
  bais = expand(config['project_dir'] + '/reports/10_mapping/{{barcode}}/pilon/{reads}.sorted.bam.bai', reads=['shortreads','subsampled','corrected'])
 output:
  config['project_dir'] + '/reports/10_mapping/{barcode}/pilon/done.igv'
 params:
  igv_prefs = config['igv_prefs'],
  outdir = config['project_dir'] + '/reports/10_mapping/{barcode}/pilon'
 run:
  segments = read_seq_ids(input.genome)
  for segment in segments:
   imagefile = params.outdir + '/' + segment + '.png'
   render(genome = input.genome, bams = sorted(input.bams), imagefile = imagefile, seqID = segment, igv_prefs=params.igv_prefs)
  shell("touch {output}")

rule igv_plot_unicycler:
 input:
  genome = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/draft2.fasta',
  bams = expand(config['project_dir'] + '/reports/10_mapping/{{barcode}}/unicycler/{reads}.sorted.bam', reads=['shortreads','subsampled','corrected']),
  bais = expand(config['project_dir'] + '/reports/10_mapping/{{barcode}}/unicycler/{reads}.sorted.bam.bai', reads=['shortreads','subsampled','corrected'])
 output:
  config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler/done.igv'
 params:
  igv_prefs = config['igv_prefs'],
  outdir = config['project_dir'] + '/reports/10_mapping/{barcode}/unicycler'
 run:
  segments = read_seq_ids(input.genome)
  for segment in segments:
   imagefile = params.outdir + '/' + segment + '.png'
   render(genome = input.genome, bams = sorted(input.bams), imagefile = imagefile, seqID = segment, igv_prefs=params.igv_prefs)
  shell("touch {output}")

