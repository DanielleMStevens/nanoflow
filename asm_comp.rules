####################
## Assembly assess and comparison
## MUMmer + QUAST (+ minimap2)
####################

#rule _test_eval:
# input:
#  expand(config['project_dir'] + '/reports/08_eval/dnadiff/{barcode}/{prefix}.report',
#  barcode=BARCODES, prefix = ['ref_draft1', 'ref_draft2']),
#  expand(config['project_dir'] + '/reports/08_eval/nucmer/{barcode}/{prefix}}.coords',
#  barcode=BARCODES, prefix = ['ref_draft1','ref_draft2','draft1_draft2'])


rule eval_assembly:
 input:
  refgenome = config['project_dir'] + '/' + config['genome_fp'],
  draft1 = config['project_dir'] + '/07_pilon/{barcode}/pilon.fasta',
  draft2 = config['project_dir'] + '/08_unicycler/{barcode}/assembly.fasta'
 output:
  draft1 = config['project_dir'] + '/reports/08_eval/dnadiff/{barcode}/ref_draft1.report',
  draft2 = config['project_dir'] + '/reports/08_eval/dnadiff/{barcode}/ref_draft2.report',
  repeats = config['project_dir'] + '/reports/08_eval/nucmer/{barcode}/ref.repeats',
  ref_draft1 = config['project_dir'] + '/reports/08_eval/nucmer/{barcode}/ref_draft1.coords',
  ref_draft2 = config['project_dir'] + '/reports/08_eval/nucmer/{barcode}/ref_draft2.coords',
  draft1_draft2 = config['project_dir'] + '/reports/08_eval/nucmer/{barcode}/draft1_draft2.coords',
 params:
  out_dir1 = config['project_dir'] + '/reports/08_eval/dnadiff/{barcode}',
  out_dir2 = config['project_dir'] + '/reports/08_eval/nucmer/{barcode}',
  prefix1 = 'ref_draft1',
  prefix2 = 'ref_draft2',
  prefix3 = 'draft1_draft2'
 shell:
  """
  ## avgident
  cd {params.out_dir1}
  dnadiff --prefix ref_draft1 {input.refgenome} {input.draft1}
  dnadiff --prefix ref_draft2 {input.refgenome} {input.draft2}
  
  cd {params.out_dir2}
  ## find exact tandem repeats of length 100 or greater in a single sequence seq.fasta
  repeat-match -n 100 {input.refgenome} 100 > {output.repeats}

  ## mapping a draft sequence to a finished sequence
  nucmer -maxmatch -c 100 -p {params.prefix1} {input.refgenome} {input.draft1}
  show-coords -r -c -l {params.prefix1}.delta > {output.ref_draft1}
  
  nucmer -maxmatch -c 100 -p {params.prefix2} {input.refgenome} {input.draftw}
  show-coords -r -c -l {params.prefix2}.delta > {output.ref_draft2}
  
  ## aligning two draft sequences
  nucmer -maxmatch -c 100 -p {params.prefix3} {input.draft1} {input.draft2}
  show-coords -r -c -l {params.prefix3}.delta > {output.draft1_draft2}
  """

rule run_quast:
 input:
  ref = config['project_dir'] + '/' + config['genome_fp'],
  gff = config['project_dir'] + '/' + config['gene_fp'],
  draft1 = config['project_dir'] + '/07_pilon/{barcode}/pilon.fasta',
  draft2 = config['project_dir'] + '/08_unicycler/{barcode}/assembly.fasta'
 output:
  config['project_dir'] + '/reports/08_eval/quast/{barcode}/quast_results/quast.log',
 params:
  outdir = config['project_dir'] + '/reports/08_eval/quast/{barcode}/quast_results'
 threads: 4
 conda: 
  config['quast_yaml_fp']
 shell:
  """
  quast.py -t {threads} --gene-finding --gage -o {params.outdir} -R {input.ref} -G {input.gff} {input.draft1} {input.draft1}
  """

rule _all_quast:
 input:
   config['project_dir'] + '/reports/08_eval/quast/barcode03/quast_results/quast.log'
